// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PlayerSearch.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Examples.GrpcModels {

  /// <summary>Holder for reflection information generated from PlayerSearch.proto</summary>
  public static partial class PlayerSearchReflection {

    #region Descriptor
    /// <summary>File descriptor for PlayerSearch.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PlayerSearchReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJQbGF5ZXJTZWFyY2gucHJvdG8iSAoGUGxheWVyEgwKBE5hbWUYASABKAkS",
            "CwoDQWdlGAIgASgFEhEKCVBvc2l0aW9ucxgDIAMoCRIQCghUZWFtQ29kZRgE",
            "IAEoCSIzCgRUZWFtEgwKBENvZGUYASABKAkSDAoETmFtZRgCIAEoCRIPCgdD",
            "b3VudHJ5GAMgASgJIk0KEVRlYW1TZWFyY2hSZXF1ZXN0EhkKEUV4cGVjdGVk",
            "RGF0YUNvdW50GAEgASgFEgwKBE5hbWUYAiABKAkSDwoHQ291bnRyeRgDIAEo",
            "CSIqChJUZWFtU2VhcmNoUmVzcG9uc2USFAoFVGVhbXMYASADKAsyBS5UZWFt",
            "ImgKE1BsYXllclNlYXJjaFJlcXVlc3QSGQoRRXhwZWN0ZWREYXRhQ291bnQY",
            "ASABKAUSEgoKUGxheWVyTmFtZRgCIAEoCRIQCghUZWFtTmFtZRgDIAEoCRIQ",
            "CghQb3NpdGlvbhgEIAEoCSKWAQoUUGxheWVyU2VhcmNoUmVzcG9uc2USGAoH",
            "UGxheWVycxgBIAMoCzIHLlBsYXllchIvCgVUZWFtcxgCIAMoCzIgLlBsYXll",
            "clNlYXJjaFJlc3BvbnNlLlRlYW1zRW50cnkaMwoKVGVhbXNFbnRyeRILCgNr",
            "ZXkYASABKAkSFAoFdmFsdWUYAiABKAsyBS5UZWFtOgI4ATKzAgoMUGxheWVy",
            "U2VhcmNoEjcKClNlYXJjaFRlYW0SEi5UZWFtU2VhcmNoUmVxdWVzdBoTLlRl",
            "YW1TZWFyY2hSZXNwb25zZSIAEkwKGVNlYXJjaFBsYXllcl9TZXJ2ZXJTdHJl",
            "YW0SFC5QbGF5ZXJTZWFyY2hSZXF1ZXN0GhUuUGxheWVyU2VhcmNoUmVzcG9u",
            "c2UiADABEkwKGVNlYXJjaFBsYXllcl9DbGllbnRTdHJlYW0SFC5QbGF5ZXJT",
            "ZWFyY2hSZXF1ZXN0GhUuUGxheWVyU2VhcmNoUmVzcG9uc2UiACgBEk4KGVNl",
            "YXJjaFBsYXllcl9EdXBsZXhTdHJlYW0SFC5QbGF5ZXJTZWFyY2hSZXF1ZXN0",
            "GhUuUGxheWVyU2VhcmNoUmVzcG9uc2UiACgBMAFCFqoCE0V4YW1wbGVzLkdy",
            "cGNNb2RlbHNiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Examples.GrpcModels.Player), global::Examples.GrpcModels.Player.Parser, new[]{ "Name", "Age", "Positions", "TeamCode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Examples.GrpcModels.Team), global::Examples.GrpcModels.Team.Parser, new[]{ "Code", "Name", "Country" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Examples.GrpcModels.TeamSearchRequest), global::Examples.GrpcModels.TeamSearchRequest.Parser, new[]{ "ExpectedDataCount", "Name", "Country" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Examples.GrpcModels.TeamSearchResponse), global::Examples.GrpcModels.TeamSearchResponse.Parser, new[]{ "Teams" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Examples.GrpcModels.PlayerSearchRequest), global::Examples.GrpcModels.PlayerSearchRequest.Parser, new[]{ "ExpectedDataCount", "PlayerName", "TeamName", "Position" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Examples.GrpcModels.PlayerSearchResponse), global::Examples.GrpcModels.PlayerSearchResponse.Parser, new[]{ "Players", "Teams" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, })
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Player : pb::IMessage<Player> {
    private static readonly pb::MessageParser<Player> _parser = new pb::MessageParser<Player>(() => new Player());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Player> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Examples.GrpcModels.PlayerSearchReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player(Player other) : this() {
      name_ = other.name_;
      age_ = other.age_;
      positions_ = other.positions_.Clone();
      teamCode_ = other.teamCode_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Player Clone() {
      return new Player(this);
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Age" field.</summary>
    public const int AgeFieldNumber = 2;
    private int age_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Age {
      get { return age_; }
      set {
        age_ = value;
      }
    }

    /// <summary>Field number for the "Positions" field.</summary>
    public const int PositionsFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_positions_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> positions_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Positions {
      get { return positions_; }
    }

    /// <summary>Field number for the "TeamCode" field.</summary>
    public const int TeamCodeFieldNumber = 4;
    private string teamCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TeamCode {
      get { return teamCode_; }
      set {
        teamCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Player);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Player other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Age != other.Age) return false;
      if(!positions_.Equals(other.positions_)) return false;
      if (TeamCode != other.TeamCode) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Age != 0) hash ^= Age.GetHashCode();
      hash ^= positions_.GetHashCode();
      if (TeamCode.Length != 0) hash ^= TeamCode.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Age != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Age);
      }
      positions_.WriteTo(output, _repeated_positions_codec);
      if (TeamCode.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(TeamCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Age != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Age);
      }
      size += positions_.CalculateSize(_repeated_positions_codec);
      if (TeamCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TeamCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Player other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Age != 0) {
        Age = other.Age;
      }
      positions_.Add(other.positions_);
      if (other.TeamCode.Length != 0) {
        TeamCode = other.TeamCode;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Age = input.ReadInt32();
            break;
          }
          case 26: {
            positions_.AddEntriesFrom(input, _repeated_positions_codec);
            break;
          }
          case 34: {
            TeamCode = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Team : pb::IMessage<Team> {
    private static readonly pb::MessageParser<Team> _parser = new pb::MessageParser<Team>(() => new Team());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Team> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Examples.GrpcModels.PlayerSearchReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Team() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Team(Team other) : this() {
      code_ = other.code_;
      name_ = other.name_;
      country_ = other.country_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Team Clone() {
      return new Team(this);
    }

    /// <summary>Field number for the "Code" field.</summary>
    public const int CodeFieldNumber = 1;
    private string code_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Code {
      get { return code_; }
      set {
        code_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Country" field.</summary>
    public const int CountryFieldNumber = 3;
    private string country_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Country {
      get { return country_; }
      set {
        country_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Team);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Team other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (Name != other.Name) return false;
      if (Country != other.Country) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code.Length != 0) hash ^= Code.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Country.Length != 0) hash ^= Country.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Code);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Country.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Country);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Code);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Country.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Country);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Team other) {
      if (other == null) {
        return;
      }
      if (other.Code.Length != 0) {
        Code = other.Code;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Country.Length != 0) {
        Country = other.Country;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Code = input.ReadString();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Country = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TeamSearchRequest : pb::IMessage<TeamSearchRequest> {
    private static readonly pb::MessageParser<TeamSearchRequest> _parser = new pb::MessageParser<TeamSearchRequest>(() => new TeamSearchRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamSearchRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Examples.GrpcModels.PlayerSearchReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamSearchRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamSearchRequest(TeamSearchRequest other) : this() {
      expectedDataCount_ = other.expectedDataCount_;
      name_ = other.name_;
      country_ = other.country_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamSearchRequest Clone() {
      return new TeamSearchRequest(this);
    }

    /// <summary>Field number for the "ExpectedDataCount" field.</summary>
    public const int ExpectedDataCountFieldNumber = 1;
    private int expectedDataCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExpectedDataCount {
      get { return expectedDataCount_; }
      set {
        expectedDataCount_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Country" field.</summary>
    public const int CountryFieldNumber = 3;
    private string country_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Country {
      get { return country_; }
      set {
        country_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeamSearchRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeamSearchRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ExpectedDataCount != other.ExpectedDataCount) return false;
      if (Name != other.Name) return false;
      if (Country != other.Country) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ExpectedDataCount != 0) hash ^= ExpectedDataCount.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Country.Length != 0) hash ^= Country.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ExpectedDataCount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ExpectedDataCount);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Country.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Country);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ExpectedDataCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExpectedDataCount);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Country.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Country);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeamSearchRequest other) {
      if (other == null) {
        return;
      }
      if (other.ExpectedDataCount != 0) {
        ExpectedDataCount = other.ExpectedDataCount;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Country.Length != 0) {
        Country = other.Country;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ExpectedDataCount = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Country = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TeamSearchResponse : pb::IMessage<TeamSearchResponse> {
    private static readonly pb::MessageParser<TeamSearchResponse> _parser = new pb::MessageParser<TeamSearchResponse>(() => new TeamSearchResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeamSearchResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Examples.GrpcModels.PlayerSearchReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamSearchResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamSearchResponse(TeamSearchResponse other) : this() {
      teams_ = other.teams_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeamSearchResponse Clone() {
      return new TeamSearchResponse(this);
    }

    /// <summary>Field number for the "Teams" field.</summary>
    public const int TeamsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Examples.GrpcModels.Team> _repeated_teams_codec
        = pb::FieldCodec.ForMessage(10, global::Examples.GrpcModels.Team.Parser);
    private readonly pbc::RepeatedField<global::Examples.GrpcModels.Team> teams_ = new pbc::RepeatedField<global::Examples.GrpcModels.Team>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Examples.GrpcModels.Team> Teams {
      get { return teams_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeamSearchResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeamSearchResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!teams_.Equals(other.teams_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= teams_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      teams_.WriteTo(output, _repeated_teams_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += teams_.CalculateSize(_repeated_teams_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeamSearchResponse other) {
      if (other == null) {
        return;
      }
      teams_.Add(other.teams_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            teams_.AddEntriesFrom(input, _repeated_teams_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerSearchRequest : pb::IMessage<PlayerSearchRequest> {
    private static readonly pb::MessageParser<PlayerSearchRequest> _parser = new pb::MessageParser<PlayerSearchRequest>(() => new PlayerSearchRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerSearchRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Examples.GrpcModels.PlayerSearchReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerSearchRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerSearchRequest(PlayerSearchRequest other) : this() {
      expectedDataCount_ = other.expectedDataCount_;
      playerName_ = other.playerName_;
      teamName_ = other.teamName_;
      position_ = other.position_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerSearchRequest Clone() {
      return new PlayerSearchRequest(this);
    }

    /// <summary>Field number for the "ExpectedDataCount" field.</summary>
    public const int ExpectedDataCountFieldNumber = 1;
    private int expectedDataCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExpectedDataCount {
      get { return expectedDataCount_; }
      set {
        expectedDataCount_ = value;
      }
    }

    /// <summary>Field number for the "PlayerName" field.</summary>
    public const int PlayerNameFieldNumber = 2;
    private string playerName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerName {
      get { return playerName_; }
      set {
        playerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TeamName" field.</summary>
    public const int TeamNameFieldNumber = 3;
    private string teamName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TeamName {
      get { return teamName_; }
      set {
        teamName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Position" field.</summary>
    public const int PositionFieldNumber = 4;
    private string position_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Position {
      get { return position_; }
      set {
        position_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerSearchRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerSearchRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ExpectedDataCount != other.ExpectedDataCount) return false;
      if (PlayerName != other.PlayerName) return false;
      if (TeamName != other.TeamName) return false;
      if (Position != other.Position) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ExpectedDataCount != 0) hash ^= ExpectedDataCount.GetHashCode();
      if (PlayerName.Length != 0) hash ^= PlayerName.GetHashCode();
      if (TeamName.Length != 0) hash ^= TeamName.GetHashCode();
      if (Position.Length != 0) hash ^= Position.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ExpectedDataCount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ExpectedDataCount);
      }
      if (PlayerName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PlayerName);
      }
      if (TeamName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(TeamName);
      }
      if (Position.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Position);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ExpectedDataCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExpectedDataCount);
      }
      if (PlayerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerName);
      }
      if (TeamName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TeamName);
      }
      if (Position.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Position);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerSearchRequest other) {
      if (other == null) {
        return;
      }
      if (other.ExpectedDataCount != 0) {
        ExpectedDataCount = other.ExpectedDataCount;
      }
      if (other.PlayerName.Length != 0) {
        PlayerName = other.PlayerName;
      }
      if (other.TeamName.Length != 0) {
        TeamName = other.TeamName;
      }
      if (other.Position.Length != 0) {
        Position = other.Position;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ExpectedDataCount = input.ReadInt32();
            break;
          }
          case 18: {
            PlayerName = input.ReadString();
            break;
          }
          case 26: {
            TeamName = input.ReadString();
            break;
          }
          case 34: {
            Position = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerSearchResponse : pb::IMessage<PlayerSearchResponse> {
    private static readonly pb::MessageParser<PlayerSearchResponse> _parser = new pb::MessageParser<PlayerSearchResponse>(() => new PlayerSearchResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerSearchResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Examples.GrpcModels.PlayerSearchReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerSearchResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerSearchResponse(PlayerSearchResponse other) : this() {
      players_ = other.players_.Clone();
      teams_ = other.teams_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerSearchResponse Clone() {
      return new PlayerSearchResponse(this);
    }

    /// <summary>Field number for the "Players" field.</summary>
    public const int PlayersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Examples.GrpcModels.Player> _repeated_players_codec
        = pb::FieldCodec.ForMessage(10, global::Examples.GrpcModels.Player.Parser);
    private readonly pbc::RepeatedField<global::Examples.GrpcModels.Player> players_ = new pbc::RepeatedField<global::Examples.GrpcModels.Player>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Examples.GrpcModels.Player> Players {
      get { return players_; }
    }

    /// <summary>Field number for the "Teams" field.</summary>
    public const int TeamsFieldNumber = 2;
    private static readonly pbc::MapField<string, global::Examples.GrpcModels.Team>.Codec _map_teams_codec
        = new pbc::MapField<string, global::Examples.GrpcModels.Team>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Examples.GrpcModels.Team.Parser), 18);
    private readonly pbc::MapField<string, global::Examples.GrpcModels.Team> teams_ = new pbc::MapField<string, global::Examples.GrpcModels.Team>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Examples.GrpcModels.Team> Teams {
      get { return teams_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerSearchResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerSearchResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!players_.Equals(other.players_)) return false;
      if (!Teams.Equals(other.Teams)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= players_.GetHashCode();
      hash ^= Teams.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      players_.WriteTo(output, _repeated_players_codec);
      teams_.WriteTo(output, _map_teams_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += players_.CalculateSize(_repeated_players_codec);
      size += teams_.CalculateSize(_map_teams_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerSearchResponse other) {
      if (other == null) {
        return;
      }
      players_.Add(other.players_);
      teams_.Add(other.teams_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            players_.AddEntriesFrom(input, _repeated_players_codec);
            break;
          }
          case 18: {
            teams_.AddEntriesFrom(input, _map_teams_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
